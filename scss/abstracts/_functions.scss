// Functions
/// Returns the breakpoint value for a given variant.
///
/// @param {String} $width - which breakpoint width do you need.
/// @return {Number} The spacing for the variant in px.

@function breakpoint($width: auto) {
  $fetched-value: map-get($breakpoints, $width);

  @if type-of($fetched-value) == number {
    @return $fetched-value;
  } @else {
    @error 'Breakpoint variant `#{$width}` not found. Available variants: #{$breakpoints}';
  }
}

/// Returns the spacing value for a given variant.
///
/// @param {String} $space - how much space do you need.
/// @return {Number} The spacing for the variant in px.

@function space($space: base) {
  $fetched-value: map-get($spacing-data, $space);

  @if type-of($fetched-value) == number {
    @return $fetched-value;
  } @else {
    @error 'Spacing variant `#{$space}` not found. Available variants: #{$spacing-data}';
  }
}

/// Returns the value in rem for a given pixel value.
/// @param {Number} $value - The pixel value to be converted.
/// @return {Number} The converted value in rem.

@function rem($value) {
  $unit: unit($value);

  @if $value == 0 {
    @return 0;
  } @else if $unit == 'rem' {
    @return $value;
  } @else if $unit == 'px' {
    @return $value / $font-size-base * 1rem;
  } @else if $unit == 'em' {
    @return $unit / 1em * 1rem;
  } @else {
    @error 'Value must be in px, em, or rem.';
  }
}

/// Returns the value in ems for a given pixel value. Note that this
/// only works for elements that have had no font-size changes.
/// @param {Number} $value - The pixel value to be converted.
/// @return {Number} The converted value in ems.

@function em($value) {
  $unit: unit($value);

  @if $value == 0 {
    @return 0;
  } @else if $unit == 'em' {
    @return $value;
  } @else if $unit == 'rem' {
    @return $value / 1rem * 1em * ($font-size-base / $default-browser-font-size);
  } @else if $unit == 'px' {
    @return $value / $default-browser-font-size * 1em;
  } @else {
    @error 'Value must be in px, rem, or em.';
  }
}

/// Returns the font size for a given range.
///
/// @param {Number} $range - The font style.
/// @return {Number} The font-size for the text-style.
@function font-size($range) {
  $fetched-font-size: map-get($font-size-data, $range);
  @if type-of($fetched-font-size) != null {
    @return $fetched-font-size;
  } @else {
    @error 'Font size range `#{$range}` not found. Available font sizes: #{$font-size-data}';
  }
}

/// Returns the line height for a given range.
///
/// @param {Number} $range - The font style.
/// @return {Number} The line-height for the text-style.
@function line-height($range: normal) {
  $fetched-line-height: map-get($line-height-data, $range);
  @if type-of($fetched-line-height) != null {
    @return $fetched-line-height;
  } @else {
    @error 'Line height `#{$range}` not found. Available line heights: #{$line-height-data}';
  }
}

/// Returns the font weight for a given weight definition.
///
/// @param {String} $weight - The font weight.
/// @return {Number} The font-weight for the text-weight.
@function font-weight($weight: normal) {
  $fetched-font-weight: map-get($font-weight-data, $weight);
  @if type-of($fetched-font-weight) != null {
    @return $fetched-font-weight;
  } @else {
    @error 'Font weight `#{$weight}` not found. Available font weights: #{$font-weight-data}';
  }
}
